/****************************************************************************
 * Copyright (c) 2012 Texas Instruments Incorporated - http://www.ti.com
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *    Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 *    Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 *    Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *****************************************************************************/

var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Timestamp = xdc.useModule('xdc.runtime.Timestamp');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
var Event = xdc.useModule('ti.sysbios.knl.Event');
var HeapMultiBuf = xdc.useModule('ti.sysbios.heaps.HeapMultiBuf');
var GateMutexPri = xdc.useModule('ti.sysbios.gates.GateMutexPri');
var TimestampProvider = xdc.useModule('ti.sysbios.family.arm.lm3.TimestampProvider');

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;  

/*
 * The BIOS module will create the default heap for the system.
 * Specify the size of this default heap.
 */
BIOS.heapSize = 0x4000;

/* System stack size (used by ISRs and Swis) */
Program.stack = 0x2000;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 0x200;

/* Task Stack Size */
Task.defaultStackSize = 0x800;

/* Clock speed */
BIOS.cpuFreq.lo = 20000000;

/*====================== HWIs ======================*/
var hwi0Params = new Hwi.Params();
hwi0Params.instance.name = "CONSOLE_UART_HWI";
hwi0Params.priority = -1;
Program.global.CONSOLE_UART_HWI = Hwi.create(21, "&CONSOLE_UART_ISR", hwi0Params);

var hwi4Params = new Hwi.Params();
hwi4Params.instance.name = "SOC_UART_HWI";
hwi4Params.priority = -1;
Program.global.SOC_UART_HWI = Hwi.create(22, "&SOC_UART_ISR", hwi4Params);

var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "SPI0_HWI";
hwi1Params.priority = -1;
Program.global.SPI0_HWI = Hwi.create(23, "&SPI_0_HWI", hwi1Params);

var hwi2Params = new Hwi.Params();
hwi2Params.instance.name = "SPI1_HWI";
hwi2Params.priority = -1;
Program.global.SPI1_HWI = Hwi.create(50, "&SPI_1_HWI", hwi2Params);

var hwi3Params = new Hwi.Params();
hwi3Params.instance.name = "I2C1_HWI";
hwi3Params.priority = -1;
Program.global.I2C1_HWI = Hwi.create(53, "&I2C_1_HWI", hwi3Params);

/*====================== SWIs ======================*/
var swi0Params = new Swi.Params();
swi0Params.instance.name = "UART_CLOCK_SWI";
swi0Params.priority = 0;
Program.global.UART_CLOCK_SWI = Swi.create("&UART_Clock_Swi", swi0Params);

var swi1Params = new Swi.Params();
swi1Params.instance.name = "SOC_UART_SWI";
swi1Params.priority = 1;
Program.global.SOC_UART_SWI = Swi.create("&UART_Swi", swi1Params);

var swi2Params = new Swi.Params();
swi2Params.instance.name = "LCD_swi";
swi2Params.priority = 2;
Program.global.LCD_swi = Swi.create("&LCD_SWI", swi2Params);

/*====================== Tasks =======================*/
var task0Params = new Task.Params();
task0Params.instance.name = "UART_task";
task0Params.priority = 1;
Program.global.UART_task = Task.create("&UART_Task", task0Params);

var task1Params = new Task.Params();
task1Params.instance.name = "Command_task";
task1Params.priority = 2;
Program.global.Command_task = Task.create("&CMD_Task", task1Params);

var task2Params = new Task.Params();
task2Params.instance.name = "LCD_Task"
task2Params.priority = 4;
Program.global.LCD_Task = Task.create("&LCD_Pages", task2Params);

var task3Params = new Task.Params();
task3Params.instance.name = "State_Machine_Task";
task3Params.priority = 3;
Program.global.State_Machine_Task = Task.create("&State_Machine", task3Params);

var task4Params = new Task.Params();
task4Params.instance.name = "Polling_task";
task4Params.priority = 6;
Program.global.Polling_task = Task.create("&Polling_Task", task4Params);

var task5Params = new Task.Params();
task5Params.instance.name = "LCD_print_task";
task5Params.priority = 5;
Program.global.LCD_print_task = Task.create("&LCD_Print_Task", task5Params);

/*====================== Events =======================*/
var event0Params = new Event.Params();
event0Params.instance.name = "UART_events";
Program.global.UART_events = Event.create();
Program.global.UART_events.instance.name = "UART_events";

/*====================== Semaphores ========================*/
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "CMD_sem";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.CMD_sem = Semaphore.create(1, semaphore0Params);

var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "CMD_Start_sem";
Program.global.CMD_Start_sem = Semaphore.create(null, semaphore1Params);

var semaphore2Params = new Semaphore.Params();
semaphore2Params.instance.name = "PAGE_sem";
semaphore2Params.mode = Semaphore.Mode_BINARY;
Program.global.PAGE_sem = Semaphore.create(1, semaphore2Params);

var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "MESSAGE_sem";
semaphore3Params.mode = Semaphore.Mode_BINARY;
Program.global.MESSAGE_sem = Semaphore.create(null, semaphore3Params);

var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "CONFIG_sem";
semaphore4Params.mode = Semaphore.Mode_BINARY;
Program.global.CONFIG_sem = Semaphore.create(null, semaphore4Params);

var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "LCD_sem";
semaphore5Params.mode = Semaphore.Mode_BINARY;
Program.global.LCD_sem = Semaphore.create(null, semaphore5Params);

var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "I2C1_Semaphore";
semaphore6Params.mode = Semaphore.Mode_BINARY;
Program.global.I2C1_Semaphore = Semaphore.create(null, semaphore6Params);

var semaphore7Params = new Semaphore.Params();
semaphore7Params.instance.name = "SPI0_Semaphore";
semaphore7Params.mode = Semaphore.Mode_BINARY;
Program.global.SPI0_Semaphore = Semaphore.create(null, semaphore7Params);

var semaphore8Params = new Semaphore.Params();
semaphore8Params.instance.name = "SPI1_Semaphore";
semaphore8Params.mode = Semaphore.Mode_BINARY;
Program.global.SPI1_Semaphore = Semaphore.create(null, semaphore8Params);

var semaphore9Params = new Semaphore.Params();
semaphore9Params.instance.name = "STATE_MACHINE_sem";
semaphore9Params.mode = Semaphore.Mode_BINARY;
Program.global.STATE_MACHINE_sem = Semaphore.create(null, semaphore9Params);

var semaphore10Params = new Semaphore.Params();
semaphore10Params.instance.name = "BOARD_GOAL_sem";
semaphore10Params.mode = Semaphore.Mode_BINARY;
Program.global.BOARD_GOAL_sem = Semaphore.create(1, semaphore10Params);

var semaphore11Params = new Semaphore.Params();
semaphore11Params.instance.name = "GRACEFUL_sem";
semaphore11Params.mode = Semaphore.Mode_BINARY;
Program.global.GRACEFUL_sem = Semaphore.create(1, semaphore11Params);

var semaphore12Params = new Semaphore.Params();
semaphore12Params.instance.name = "DEBUG_MODE_sem";
semaphore12Params.mode = Semaphore.Mode_BINARY;
Program.global.DEBUG_MODE_sem = Semaphore.create(1, semaphore12Params);

var semaphore13Params = new Semaphore.Params();
semaphore13Params.instance.name = "SOC0_Semaphore";
semaphore13Params.mode = Semaphore.Mode_BINARY;
Program.global.SOC0_Semaphore = Semaphore.create(1, semaphore13Params);

var semaphore14Params = new Semaphore.Params();
semaphore14Params.instance.name = "REBOOT_sem";
semaphore14Params.mode = Semaphore.Mode_BINARY;
Program.global.REBOOT_sem = Semaphore.create(1, semaphore14Params);

var semaphore15Params = new Semaphore.Params();
semaphore15Params.instance.name = "POLLING_sem";
semaphore15Params.mode = Semaphore.Mode_BINARY;
Program.global.POLLING_sem = Semaphore.create(null, semaphore15Params);

var semaphore16Params = new Semaphore.Params();
semaphore16Params.instance.name = "LCD_Print_Sem";
semaphore16Params.mode = Semaphore.Mode_BINARY;
Program.global.LCD_Print_Sem = Semaphore.create(null, semaphore16Params);

/*====================== Mutexes ========================*/
var gatemutexpri0Params = new GateMutexPri.Params;
gatemutexpri0Params.instance.name = "GPIOA_Mutex";
Program.global.GPIOA_Mutex = GateMutexPri.create(gatemutexpri0Params);

var gatemutexpri1Params = new GateMutexPri.Params;
gatemutexpri1Params.instance.name = "GPIOB_Mutex";
Program.global.GPIOB_Mutex = GateMutexPri.create(gatemutexpri1Params);

var gatemutexpri2Params = new GateMutexPri.Params;
gatemutexpri2Params.instance.name = "GPIOC_Mutex";
Program.global.GPIOC_Mutex = GateMutexPri.create(gatemutexpri2Params);

var gatemutexpri3Params = new GateMutexPri.Params;
gatemutexpri3Params.instance.name = "GPIOD_Mutex";
Program.global.GPIOD_Mutex = GateMutexPri.create(gatemutexpri3Params);

var gatemutexpri4Params = new GateMutexPri.Params;
gatemutexpri4Params.instance.name = "GPIOE_Mutex";
Program.global.GPIOE_Mutex = GateMutexPri.create(gatemutexpri4Params);

var gatemutexpri5Params = new GateMutexPri.Params;
gatemutexpri5Params.instance.name = "GPIOF_Mutex";
Program.global.GPIOF_Mutex = GateMutexPri.create(gatemutexpri5Params);

var gatemutexpri6Params = new GateMutexPri.Params;
gatemutexpri6Params.instance.name = "GPIOG_Mutex";
Program.global.GPIOG_Mutex = GateMutexPri.create(gatemutexpri6Params);

var gatemutexpri7Params = new GateMutexPri.Params;
gatemutexpri7Params.instance.name = "GPIOH_Mutex";
Program.global.GPIOH_Mutex = GateMutexPri.create(gatemutexpri7Params);

var gatemutexpri8Params = new GateMutexPri.Params;
gatemutexpri8Params.instance.name = "GPIOJ_Mutex";
Program.global.GPIOJ_Mutex = GateMutexPri.create(gatemutexpri8Params);

var gatemutexpri9Params = new GateMutexPri.Params;
gatemutexpri9Params.instance.name = "GPIOXA_Mutex";
Program.global.GPIOXA_Mutex = GateMutexPri.create(gatemutexpri9Params);

var gatemutexpri10Params = new GateMutexPri.Params;
gatemutexpri10Params.instance.name = "GPIOXB_Mutex";
Program.global.GPIOXB_Mutex = GateMutexPri.create(gatemutexpri10Params);

var gatemutexpri11Params = new GateMutexPri.Params;
gatemutexpri11Params.instance.name = "GPIOXC_Mutex";
Program.global.GPIOXC_Mutex = GateMutexPri.create(gatemutexpri11Params);

var gatemutexpri12Params = new GateMutexPri.Params;
gatemutexpri12Params.instance.name = "GPIOXD_Mutex";
Program.global.GPIOXD_Mutex = GateMutexPri.create(gatemutexpri12Params);

var gatemutexpri13Params = new GateMutexPri.Params;
gatemutexpri13Params.instance.name = "I2C1_Mutex";
Program.global.I2C1_Mutex = GateMutexPri.create(gatemutexpri13Params);

var gatemutexpri14Params = new GateMutexPri.Params;
gatemutexpri14Params.instance.name = "SPI0_Mutex";
Program.global.SPI0_Mutex = GateMutexPri.create(gatemutexpri14Params);

var gatemutexpri15Params = new GateMutexPri.Params;
gatemutexpri15Params.instance.name = "SPI1_Mutex";
Program.global.SPI1_Mutex = GateMutexPri.create(gatemutexpri15Params);

/*====================== Timer ==========================*/
var timer0Params = new Timer.Params();
timer0Params.period = 1000000;
timer0Params.periodType = Timer.PeriodType_MICROSECS;
Timer.create(1, '&Swi_Trigger', timer0Params);

/*====================== Heap ==========================*/
var heapMultiBuf0Params = new HeapMultiBuf.Params();
heapMultiBuf0Params.instance.name = "bmc_heap";
heapMultiBuf0Params.numBufs = 3;
heapMultiBuf0Params.bufParams =
    [{blockSize: 8, numBlocks: 64, align: 0},
    {blockSize: 16, numBlocks: 150, align: 0},
    {blockSize: 256, numBlocks: 100, align: 0}];
Program.global.bmc_heap = HeapMultiBuf.create(heapMultiBuf0Params);
